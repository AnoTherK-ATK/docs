---
// Quiz Component
// Supports multiple choice (single answer) and multiple answer questions
// Provides scoring and progress tracking

export interface Props {
    questions: Array<{
        id: string;
        type: "single" | "multiple";
        question: string | any; // Allow rich content
        options: Array<{
            id: string;
            text: string | any; // Allow rich content
        }>;
        correctAnswers: string[]; // Array for flexibility (single for type='single')
        explanation?: string | any;
    }>;
    title?: string;
}

const { questions, title } = Astro.props;
const makeId = () => {
    // ưu tiên randomUUID nếu có, fallback sang random base36
    const ru =
        globalThis.crypto && "randomUUID" in globalThis.crypto
            ? (globalThis.crypto as any).randomUUID()
            : Math.random().toString(36).slice(2);
    return `quiz-${ru}`;
};
const quizId = makeId();
---

<div class="quiz-container" id={quizId} data-quiz-id={Astro.slug}>
    {title && <h2 class="quiz-title">{title}</h2>}

    <div class="quiz-content">
        {
            questions.map((q, index) => (
                <div class="question-wrapper" data-question-id={q.id}>
                    <div class="question-header">
                        <span class="question-number">Câu {index + 1}</span>
                        {q.type === "multiple" && (
                            <span class="question-badge">
                                (Chọn nhiều đáp án)
                            </span>
                        )}
                    </div>
                    <div class="question-text">
                        {typeof q.question === "string"
                            ? q.question
                            : q.question}
                    </div>

                    <div class="options-list">
                        {q.options.map((option) => {
                            const inputId = `${quizId}-${q.id}-${option.id}`;
                            return (
                                <div class="option" data-option-id={option.id}>
                                    <input
                                        id={inputId}
                                        type={
                                            q.type === "multiple"
                                                ? "checkbox"
                                                : "radio"
                                        }
                                        name={`question-${q.id}`}
                                        value={option.id}
                                        data-question-id={q.id}
                                        data-option-id={option.id}
                                    />
                                    <label class="option-label" for={inputId}>
                                        <span
                                            class="option-check"
                                            aria-hidden="true"
                                        />
                                        <span class="option-title">
                                            Đáp án {option.id}
                                        </span>
                                    </label>

                                    <div class="option-body">
                                        {/* RICH CONTENT ở đây: text string, <Card/>, <pre><code/>… */}
                                        {option.text}
                                    </div>
                                </div>
                            );
                        })}
                    </div>

                    {q.explanation && (
                        <div
                            class="explanation"
                            style="display: none;"
                            data-explanation-id={q.id}
                        >
                            <strong>Giải thích:</strong>
                            <div class="explanation-content">
                                {typeof q.explanation === "string"
                                    ? q.explanation
                                    : q.explanation}
                            </div>
                        </div>
                    )}
                </div>
            ))
        }
    </div>

    <div class="quiz-footer">
        <button class="submit-btn">Nộp bài</button>
        <div class="result-container" style="display: none;">
            <div class="result-header">
                <h3 class="result-title">Kết quả</h3>
            </div>
            <div class="result-content">
                <div class="score-display">
                    <span class="score-label">Điểm số:</span>
                    <span class="score-value" data-score>0</span>
                    <span class="score-total">/{questions.length}</span>
                </div>
                <div class="score-percentage" data-percentage>0%</div>
                <div class="result-message" data-message></div>
            </div>
        </div>
    </div>
</div>

<script type="module" define:vars={{ questions, quizId }}>
    const container = document.getElementById(quizId);
    if (!container) {
        console.error(`Không tìm thấy container quiz với ID: ${quizId}`);
    } else {
        const submitBtn = container.querySelector(".submit-btn");
        const resultContainer = container.querySelector(".result-container");
        const resultDisplay = resultContainer?.querySelector(".result-content");

        const currentAnswers = {};
        // Init
        (questions || []).forEach((q) => {
            currentAnswers[q.id] = [];
        });

        // Lắng nghe thay đổi lựa chọn
        container
            .querySelectorAll('input[type="radio"], input[type="checkbox"]')
            .forEach((input) => {
                input.addEventListener("change", (e) => {
                    const el = e.currentTarget;
                    const questionId = el.dataset.questionId;
                    const optionId = el.dataset.optionId;

                    if (el.type === "radio") {
                        currentAnswers[questionId] = [optionId];
                    } else {
                        if (el.checked) {
                            if (
                                !currentAnswers[questionId].includes(optionId)
                            ) {
                                currentAnswers[questionId].push(optionId);
                            }
                        } else {
                            currentAnswers[questionId] = currentAnswers[
                                questionId
                            ].filter((id) => id !== optionId);
                        }
                    }
                });
            });

        // Submit
        submitBtn?.addEventListener("click", () => {
            let correctCount = 0;
            const totalQuestions = (questions || []).length;

            (questions || []).forEach((q) => {
                const questionWrapper = container.querySelector(
                    `[data-question-id="${q.id}"]`,
                );
                const userAnswers = (currentAnswers[q.id] || []).slice().sort();
                const correctAnswers = (q.correctAnswers || []).slice().sort();

                const isCorrect =
                    userAnswers.length === correctAnswers.length &&
                    userAnswers.every((ans, i) => ans === correctAnswers[i]);

                if (isCorrect) correctCount++;

                if (questionWrapper) {
                    questionWrapper.classList.add(
                        isCorrect ? "correct" : "incorrect",
                    );

                    const explanation =
                        questionWrapper.querySelector(".explanation");
                    if (explanation) explanation.style.display = "block";

                    correctAnswers.forEach((answerId) => {
                        const option = questionWrapper.querySelector(
                            `.option[data-option-id="${answerId}"]`,
                        );
                        option?.classList.add("correct-answer");
                    });

                    // đánh dấu đáp án người dùng chọn sai
                    userAnswers.forEach((answerId) => {
                        if (!correctAnswers.includes(answerId)) {
                            const option = questionWrapper.querySelector(
                                `.option[data-option-id="${answerId}"]`,
                            );
                            option?.classList.add("incorrect-answer");
                        }
                    });
                }
            });

            if (resultContainer && resultDisplay) {
                const scoreElement =
                    resultDisplay.querySelector("[data-score]");
                const percentageElement =
                    resultDisplay.querySelector("[data-percentage]");
                const messageElement =
                    resultDisplay.querySelector("[data-message]");

                if (scoreElement)
                    scoreElement.textContent = String(correctCount);

                const percentage = Math.round(
                    (correctCount / Math.max(1, totalQuestions)) * 100,
                );

                if (percentageElement) {
                    percentageElement.textContent = `${percentage}%`;
                    percentageElement.className = "score-percentage"; // reset
                    if (percentage >= 90)
                        percentageElement.classList.add("excellent");
                    else if (percentage >= 70)
                        percentageElement.classList.add("good");
                    else if (percentage >= 50)
                        percentageElement.classList.add("average");
                    else percentageElement.classList.add("poor");
                }

                if (messageElement) {
                    if (percentage >= 90)
                        messageElement.textContent =
                            "Xuất sắc! Bạn đã nắm vững kiến thức này.";
                    else if (percentage >= 70)
                        messageElement.textContent =
                            "Tốt! Bạn đã hiểu khá rõ nội dung này.";
                    else if (percentage >= 50)
                        messageElement.textContent =
                            "Khá ổn, nhưng hãy ôn tập thêm nhé.";
                    else
                        messageElement.textContent =
                            "Hãy xem lại và ôn tập thêm kiến thức này.";
                }

                resultContainer.style.display = "block";
                resultContainer.scrollIntoView({
                    behavior: "smooth",
                    block: "center",
                });
            }

            container.querySelectorAll("input").forEach((input) => {
                input.disabled = true;
            });
            if (submitBtn) submitBtn.style.display = "none";
        });
    }
</script>

<style>
    /* =========
     TOKENS
     ========= */
    :root {
        /* Lấy màu từ Starlight nếu có, có fallback an toàn */
        --qz-bg: var(--sl-color-bg, #ffffff);
        --qz-text: var(--sl-color-text, #111827);
        --qz-muted: var(--sl-color-text-muted, #6b7280);
        --qz-hairline: var(--sl-color-hairline, #e5e7eb);
        --qz-accent: var(--sl-color-accent, #4f46e5);
        --qz-accent-low: var(--sl-color-accent-low, #eef2ff);
        --qz-green: var(--sl-color-green, #10b981);
        --qz-red: var(--sl-color-red, #ef4444);
        --qz-radius: 10px;

        /* Nền nhạt/viền nhạt phối theo text để hợp cả light/dark */
        --qz-tint: color-mix(in oklab, var(--qz-text) 6%, transparent);
        --qz-tint-strong: color-mix(in oklab, var(--qz-text) 12%, transparent);

        /* Feedback đúng/sai */
        --qz-correct-bg: color-mix(in oklab, var(--qz-green) 14%, transparent);
        --qz-correct-ring: color-mix(
            in oklab,
            var(--qz-green) 32%,
            transparent
        );
        --qz-wrong-bg: color-mix(in oklab, var(--qz-red) 12%, transparent);
        --qz-wrong-ring: color-mix(in oklab, var(--qz-red) 28%, transparent);

        /* Shadow rất nhẹ để tách nền */
        --qz-shadow: 0 1px 2px rgba(0, 0, 0, 0.05),
            0 2px 8px rgba(0, 0, 0, 0.04);
    }

    html[data-theme="dark"] {
        /* tăng nhẹ tint khi dark */
        --qz-tint: color-mix(in oklab, var(--qz-text) 8%, transparent);
        --qz-tint-strong: color-mix(in oklab, var(--qz-text) 16%, transparent);
    }

    @media (prefers-reduced-motion: reduce) {
        .quiz-container * {
            transition: none !important;
            animation: none !important;
            scroll-behavior: auto !important;
        }
    }

    /* =========
     LAYOUT CHUNG
     ========= */
    .quiz-container {
        background: var(--qz-bg);
        color: var(--qz-text);
        border: 1px solid var(--qz-hairline);
        border-radius: var(--qz-radius);
        padding: 1rem;
        box-shadow: var(--qz-shadow);
    }

    .quiz-title {
        margin: 0 0 0.75rem 0;
        line-height: 1.2;
    }

    .quiz-content {
        display: grid;
        gap: 1.25rem;
    }

    .question-wrapper {
        padding: 1rem;
        border: 1px solid var(--qz-hairline);
        border-radius: calc(var(--qz-radius) - 2px);
        background: color-mix(in oklab, var(--qz-bg) 92%, transparent);
    }

    .question-header {
        display: flex;
        align-items: baseline;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .question-number {
        font-weight: 600;
    }

    .question-badge {
        font-size: 0.875rem;
        color: var(--qz-muted);
        background: var(--qz-tint);
        border: 1px solid var(--qz-tint-strong);
        border-radius: 6px;
        padding: 0.1rem 0.4rem;
    }

    .question-text {
        margin-bottom: 0.75rem;
    }

    /* =========
     OPTIONS (hỗ trợ nội dung giàu)
     Cấu trúc: .option (input + label[for] + .option-body)
     ========= */
    .options-list {
        display: grid;
        gap: 0.65rem;
    }

    .options-list .option {
        position: relative;
        border: 1px solid var(--qz-hairline);
        border-radius: 8px;
        background: var(--qz-tint);
        padding: 0.75rem 0.875rem;
        transition:
            background 0.2s ease,
            border-color 0.2s ease,
            box-shadow 0.2s ease,
            transform 0.1s ease;
    }

    .options-list .option:hover {
        border-color: color-mix(
            in oklab,
            var(--qz-accent) 28%,
            var(--qz-hairline)
        );
        background: color-mix(
            in oklab,
            var(--qz-accent-low) 60%,
            var(--qz-tint)
        );
    }

    .option input[type="radio"],
    .option input[type="checkbox"] {
        position: absolute;
        inset: 0;
        opacity: 0;
        pointer-events: none; /* dùng label để kích hoạt */
    }

    .option-label {
        display: inline-flex;
        align-items: center;
        gap: 0.6rem;
        cursor: pointer;
        user-select: none;
    }

    .option-check {
        width: 1.05rem;
        height: 1.05rem;
        border: 2px solid var(--qz-hairline);
        border-radius: 4px;
        display: inline-block;
        flex-shrink: 0;
        transition:
            border-color 0.2s ease,
            box-shadow 0.2s ease,
            background 0.2s ease;
    }

    /* radio bo tròn */
    .option input[type="radio"] + .option-label .option-check {
        border-radius: 50%;
    }

    /* checked */
    .option input:checked + .option-label .option-check {
        border-color: var(--qz-accent);
        background: color-mix(in oklab, var(--qz-accent) 20%, transparent);
        box-shadow: 0 0 0 6px var(--qz-accent-low) inset;
    }

    /* focus-visible dành cho a11y */
    .option-label:focus-visible,
    .option input:focus-visible + .option-label .option-check {
        outline: 2px solid transparent;
        box-shadow: 0 0 0 2px
            color-mix(in oklab, var(--qz-accent) 55%, transparent);
        border-radius: 6px;
    }

    .option-title {
        font-weight: 600;
    }

    /* Nội dung giàu của đáp án (Card, code block, …) */
    .option-body {
        margin-top: 0.5rem;
    }
    .option-body :where(pre, code, .card, blockquote) {
        /* không đẩy option “nở” quá mạnh */
        max-width: 100%;
    }

    /* =========
     ĐÁNH DẤU ĐÚNG/SAI (áp vào .option)
     ========= */
    .options-list .option.correct-answer {
        border-color: var(--qz-green);
        box-shadow: 0 0 0 2px var(--qz-correct-ring) inset;
        background: color-mix(
            in oklab,
            var(--qz-correct-bg) 60%,
            var(--qz-tint)
        );
    }
    .options-list .option.correct-answer .option-title::before {
        content: "✓";
        margin-right: 0.5rem;
        color: var(--qz-green);
        font-weight: 700;
    }

    .options-list .option.incorrect-answer {
        border-color: var(--qz-red);
        box-shadow: 0 0 0 2px var(--qz-wrong-ring) inset;
        background: color-mix(in oklab, var(--qz-wrong-bg) 60%, var(--qz-tint));
    }
    .options-list .option.incorrect-answer .option-title::before {
        content: "✕";
        margin-right: 0.5rem;
        color: var(--qz-red);
        font-weight: 700;
    }

    /* Khi cả câu đúng/sai, chỉ bổ sung nhấn ở wrapper để người học thấy */
    .question-wrapper.correct {
        box-shadow: 0 0 0 2px
            color-mix(in oklab, var(--qz-green) 22%, transparent) inset;
    }
    .question-wrapper.incorrect {
        box-shadow: 0 0 0 2px
            color-mix(in oklab, var(--qz-red) 18%, transparent) inset;
    }

    /* =========
     EXPLANATION
     ========= */
    .explanation {
        margin-top: 0.75rem;
        padding: 0.75rem 1rem;
        border-left: 4px solid var(--qz-accent);
        background: color-mix(
            in oklab,
            var(--qz-accent-low) 80%,
            var(--qz-tint)
        );
        border-radius: 6px;
    }
    .explanation strong {
        display: inline-block;
        margin-bottom: 0.25rem;
    }

    /* =========
     FOOTER + RESULT
     ========= */
    .quiz-footer {
        margin-top: 1rem;
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .submit-btn {
        appearance: none;
        border: 1px solid var(--qz-accent);
        background: var(--qz-accent);
        color: white;
        border-radius: 8px;
        padding: 0.6rem 1rem;
        font-weight: 600;
        cursor: pointer;
        transition:
            transform 0.06s ease,
            filter 0.2s ease,
            background 0.2s ease,
            border-color 0.2s ease;
    }
    .submit-btn:hover {
        filter: brightness(1.05);
    }
    .submit-btn:active {
        transform: translateY(1px);
    }
    .submit-btn:focus-visible {
        outline: 2px solid transparent;
        box-shadow: 0 0 0 3px
            color-mix(in oklab, var(--qz-accent) 55%, transparent);
    }

    .result-container {
        flex: 1 1 320px;
        border: 1px solid var(--qz-hairline);
        border-radius: 8px;
        padding: 0.75rem 1rem;
        background: var(--qz-tint);
    }

    .result-header {
        margin-bottom: 0.5rem;
    }
    .result-title {
        margin: 0;
        font-size: 1.05rem;
    }

    .result-content {
        display: grid;
        gap: 0.35rem;
    }

    .score-display {
        display: flex;
        align-items: baseline;
        gap: 0.4rem;
        font-size: 1.05rem;
    }
    .score-label {
        color: var(--qz-muted);
    }
    .score-value {
        font-weight: 700;
    }

    .score-percentage {
        display: inline-block;
        margin-top: 0.25rem;
        padding: 0.125rem 0.5rem;
        border-radius: 0.375rem;
        border: 1px solid var(--qz-hairline);
        background: var(--qz-accent-low);
    }
    .score-percentage.excellent {
        box-shadow: 0 0 0 2px
            color-mix(in oklab, var(--qz-green) 28%, transparent) inset;
    }
    .score-percentage.good {
        box-shadow: 0 0 0 2px
            color-mix(in oklab, var(--qz-green) 18%, transparent) inset;
    }
    .score-percentage.average {
        box-shadow: 0 0 0 2px
            color-mix(in oklab, var(--qz-accent) 18%, transparent) inset;
    }
    .score-percentage.poor {
        box-shadow: 0 0 0 2px
            color-mix(in oklab, var(--qz-red) 28%, transparent) inset;
    }

    .result-message {
        color: var(--qz-muted);
    }

    /* =========
     DISABLED (sau khi nộp)
     ========= */
    .quiz-container input[disabled] ~ .option-label {
        cursor: default;
        opacity: 0.9;
    }
    .quiz-container input[disabled] ~ .option-body {
        opacity: 0.98;
    }

    /* =========
     RESPONSIVE
     ========= */
    @media (max-width: 640px) {
        .quiz-container {
            padding: 0.875rem;
        }
        .question-wrapper {
            padding: 0.875rem;
        }
    }
</style>
